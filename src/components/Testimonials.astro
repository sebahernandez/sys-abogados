---
const testimonials = [
  {
    name: "María González",
    position: "Cliente de Derecho Civil",
    quote: "El Lic. Pérez me ayudó a resolver un complicado caso de herencia. Su profesionalismo y conocimiento fueron fundamentales para obtener un resultado favorable.",
    image: "https://randomuser.me/api/portraits/women/32.jpg"
  },
  {
    name: "Carlos Rodríguez",
    position: "Cliente de Derecho Penal",
    quote: "Gracias a la representación legal del bufete, pude demostrar mi inocencia en un caso que parecía perdido. Su dedicación y estrategia legal fueron impecables.",
    image: "https://randomuser.me/api/portraits/men/45.jpg"
  },
  {
    name: "Laura Martínez",
    position: "Cliente de Derecho Mercantil",
    quote: "Contar con el asesoramiento del Lic. Pérez para la constitución de mi empresa fue la mejor decisión. Su orientación me evitó muchos problemas legales futuros.",
    image: "https://randomuser.me/api/portraits/women/68.jpg"
  },
  {
    name: "Roberto Sánchez",
    position: "Cliente de Derecho de Familia",
    quote: "Durante mi proceso de divorcio, recibí un apoyo excepcional. Siempre me mantuvieron informado y lograron un acuerdo justo para todas las partes involucradas.",
    image: "https://randomuser.me/api/portraits/men/22.jpg"
  },
  {
    name: "Ana López",
    position: "Cliente de Derecho Laboral",
    quote: "Después de ser despedida injustamente, el bufete me representó con excelencia. Lograron que recibiera la indemnización que merecía y defendieron mis derechos laborales.",
    image: "https://randomuser.me/api/portraits/women/45.jpg"
  }
];
---

<section class="py-16 bg-white">
  <div class="container mx-auto px-4">
    <div class="text-center mb-12">
      <h2 class="text-3xl font-bold text-primary mb-4">Testimonios</h2>
      <p class="text-gray-600 max-w-2xl mx-auto">
        Lo que nuestros clientes dicen sobre nuestros servicios.
      </p>
    </div>
    
    <div class="relative overflow-hidden">
      <!-- Carousel container -->
      <div id="testimonial-carousel" class="flex transition-transform duration-500 ease-in-out">
        {testimonials.map(testimonial => (
          <div class="w-full md:w-1/2 lg:w-1/3 flex-shrink-0 px-4">
            <div class="bg-gray-50 p-6 rounded-lg shadow-md h-full">
              <div class="flex items-center mb-4">
                <img 
                  src={testimonial.image} 
                  alt={testimonial.name} 
                  class="w-16 h-16 rounded-full mr-4 object-cover"
                />
                <div>
                  <h3 class="font-bold text-gray-800">{testimonial.name}</h3>
                  <p class="text-gray-600 text-sm">{testimonial.position}</p>
                </div>
              </div>
              <p class="text-gray-700 italic">"{testimonial.quote}"</p>
            </div>
          </div>
        ))}
      </div>
      
      <!-- Navigation buttons -->
      <div class="flex justify-center mt-8 space-x-2">
        {testimonials.map((_, index) => (
          <button 
            class="carousel-dot w-3 h-3 rounded-full bg-gray-300 hover:bg-primary focus:outline-none transition-colors" 
            data-index={index}
            aria-label={`Testimonio ${index + 1}`}
          ></button>
        ))}
      </div>
      
      <!-- Arrow navigation -->
      <button 
        id="prev-btn" 
        class="absolute top-1/2 left-2 transform -translate-y-1/2 bg-white/80 hover:bg-white text-primary p-2 rounded-full shadow-md focus:outline-none"
        aria-label="Testimonio anterior"
      >
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
          <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
        </svg>
      </button>
      <button 
        id="next-btn" 
        class="absolute top-1/2 right-2 transform -translate-y-1/2 bg-white/80 hover:bg-white text-primary p-2 rounded-full shadow-md focus:outline-none"
        aria-label="Siguiente testimonio"
      >
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
          <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
        </svg>
      </button>
    </div>
  </div>
</section>

<script>
  // Carousel functionality
  document.addEventListener('DOMContentLoaded', () => {
    const carousel = document.getElementById('testimonial-carousel');
    const dots = document.querySelectorAll('.carousel-dot');
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');
    
    if (!carousel || !dots.length || !prevBtn || !nextBtn) return;
    
    let currentIndex = 0;
    const totalSlides = dots.length;
    let slideWidth = 100; // Will be calculated based on viewport
    let autoplayInterval;
    
    // Set active dot
    const setActiveDot = (index) => {
      dots.forEach((dot, i) => {
        if (i === index) {
          dot.classList.add('bg-primary');
          dot.classList.remove('bg-gray-300');
        } else {
          dot.classList.remove('bg-primary');
          dot.classList.add('bg-gray-300');
        }
      });
    };
    
    // Calculate slide width based on viewport
    const calculateSlideWidth = () => {
      if (window.innerWidth >= 1024) {
        // Large screens: 3 testimonials visible
        slideWidth = 100 / 3;
      } else if (window.innerWidth >= 768) {
        // Medium screens: 2 testimonials visible
        slideWidth = 100 / 2;
      } else {
        // Small screens: 1 testimonial visible
        slideWidth = 100;
      }
    };
    
    // Move to specific slide
    const goToSlide = (index) => {
      calculateSlideWidth();
      
      // Handle edge cases
      if (index < 0) {
        index = totalSlides - 1;
      } else if (index >= totalSlides) {
        index = 0;
      }
      
      currentIndex = index;
      const offset = -currentIndex * slideWidth;
      carousel.style.transform = `translateX(${offset}%)`;
      setActiveDot(currentIndex);
      
      // Reset autoplay timer
      resetAutoplay();
    };
    
    // Event listeners for dots
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        goToSlide(index);
      });
    });
    
    // Event listeners for buttons
    prevBtn.addEventListener('click', () => {
      goToSlide(currentIndex - 1);
    });
    
    nextBtn.addEventListener('click', () => {
      goToSlide(currentIndex + 1);
    });
    
    // Handle window resize
    window.addEventListener('resize', () => {
      calculateSlideWidth();
      goToSlide(currentIndex);
    });
    
    // Autoplay functionality
    const startAutoplay = () => {
      autoplayInterval = setInterval(() => {
        goToSlide(currentIndex + 1);
      }, 5000); // Change slide every 5 seconds
    };
    
    const resetAutoplay = () => {
      clearInterval(autoplayInterval);
      startAutoplay();
    };
    
    // Initialize carousel
    calculateSlideWidth();
    setActiveDot(0);
    startAutoplay();
    
    // Pause autoplay on hover
    carousel.addEventListener('mouseenter', () => {
      clearInterval(autoplayInterval);
    });
    
    carousel.addEventListener('mouseleave', () => {
      startAutoplay();
    });
  });
</script>